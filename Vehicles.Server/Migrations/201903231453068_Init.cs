// <auto-generated />
// ReSharper disable all

using System;
using System.Data.Entity.Migrations;
using System.CodeDom.Compiler;
using System.Data.Entity.Migrations.Infrastructure;

namespace IgiCore.Vehicles.Server.Migrations
{
    [GeneratedCode("NFive.Migration", "0.3 Alpha Build 152")]
    public class Init : DbMigration, IMigrationMetadata
    {
        string IMigrationMetadata.Id => "201903231453068_Init";
        
        string IMigrationMetadata.Source => null;
        
        string IMigrationMetadata.Target => "";
        
        public override void Up()
        {
            CreateTable(
                "dbo.Vehicles",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                        Hash = c.Long(nullable: false),
                        Handle = c.Int(),
                        NetId = c.Int(),
                        VIN = c.String(maxLength: 1000, unicode: false),
                        LicensePlate = c.String(maxLength: 1000, unicode: false),
                        TrackingUserId = c.Guid(),
                        Position_X = c.Single(nullable: false),
                        Position_Y = c.Single(nullable: false),
                        Position_Z = c.Single(nullable: false),
                        Heading = c.Single(nullable: false),
                        BodyHealth = c.Single(nullable: false),
                        EngineHealth = c.Single(nullable: false),
                        DirtLevel = c.Single(nullable: false),
                        FuelLevel = c.Single(nullable: false),
                        OilLevel = c.Single(nullable: false),
                        PetrolTankHealth = c.Single(nullable: false),
                        TowingCraneRaisedAmount = c.Single(nullable: false),
                        HasAlarm = c.Boolean(nullable: false, storeType: "bit"),
                        IsAlarmed = c.Boolean(nullable: false, storeType: "bit"),
                        IsAlarmSounding = c.Boolean(nullable: false, storeType: "bit"),
                        HasLock = c.Boolean(nullable: false, storeType: "bit"),
                        IsDrivable = c.Boolean(nullable: false, storeType: "bit"),
                        IsEngineRunning = c.Boolean(nullable: false, storeType: "bit"),
                        HasSeatBelts = c.Boolean(nullable: false, storeType: "bit"),
                        IsHighBeamsOn = c.Boolean(nullable: false, storeType: "bit"),
                        IsLightsOn = c.Boolean(nullable: false, storeType: "bit"),
                        IsInteriorLightOn = c.Boolean(nullable: false, storeType: "bit"),
                        IsSearchLightOn = c.Boolean(nullable: false, storeType: "bit"),
                        IsTaxiLightOn = c.Boolean(nullable: false, storeType: "bit"),
                        IsLeftIndicatorLightOn = c.Boolean(nullable: false, storeType: "bit"),
                        IsRightIndicatorLightOn = c.Boolean(nullable: false, storeType: "bit"),
                        IsFrontBumperBrokenOff = c.Boolean(nullable: false, storeType: "bit"),
                        IsRearBumperBrokenOff = c.Boolean(nullable: false, storeType: "bit"),
                        IsLeftHeadLightBroken = c.Boolean(nullable: false, storeType: "bit"),
                        IsRightHeadLightBroken = c.Boolean(nullable: false, storeType: "bit"),
                        IsRadioEnabled = c.Boolean(nullable: false, storeType: "bit"),
                        IsRoofOpen = c.Boolean(nullable: false, storeType: "bit"),
                        NeedsToBeHotWired = c.Boolean(nullable: false, storeType: "bit"),
                        HasRoof = c.Boolean(nullable: false, storeType: "bit"),
                        IsVehicleConvertible = c.Boolean(nullable: false, storeType: "bit"),
                        CanTiresBurst = c.Boolean(nullable: false, storeType: "bit"),
                        PrimaryColor_StockColor = c.Int(nullable: false),
                        PrimaryColor_CustomColor_A = c.Byte(),
                        PrimaryColor_CustomColor_R = c.Byte(),
                        PrimaryColor_CustomColor_G = c.Byte(),
                        PrimaryColor_CustomColor_B = c.Byte(),
                        PrimaryColor_IsCustom = c.Boolean(nullable: false, storeType: "bit"),
                        SecondaryColor_StockColor = c.Int(nullable: false),
                        SecondaryColor_CustomColor_A = c.Byte(),
                        SecondaryColor_CustomColor_R = c.Byte(),
                        SecondaryColor_CustomColor_G = c.Byte(),
                        SecondaryColor_CustomColor_B = c.Byte(),
                        SecondaryColor_IsCustom = c.Boolean(nullable: false, storeType: "bit"),
                        PearlescentColor = c.Int(nullable: false),
                        DashboardColor = c.Int(nullable: false),
                        RimColor = c.Int(nullable: false),
                        NeonColor_A = c.Byte(),
                        NeonColor_R = c.Byte(),
                        NeonColor_G = c.Byte(),
                        NeonColor_B = c.Byte(),
                        NeonPositions = c.Int(nullable: false),
                        TireSmokeColor_A = c.Byte(),
                        TireSmokeColor_R = c.Byte(),
                        TireSmokeColor_G = c.Byte(),
                        TireSmokeColor_B = c.Byte(),
                        TrimColor = c.Int(nullable: false),
                        WindowTint = c.Int(nullable: false),
                        LockStatus = c.Int(nullable: false),
                        RadioStation = c.Int(nullable: false),
                        Class = c.Int(nullable: false),
                        Discriminator = c.String(nullable: false, maxLength: 128, storeType: "nvarchar"),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.VehicleDoors",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Index = c.Int(nullable: false),
                        IsOpen = c.Boolean(nullable: false, storeType: "bit"),
                        IsBroken = c.Boolean(nullable: false, storeType: "bit"),
                        Angle = c.Single(nullable: false),
                        VehicleId = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Vehicles", t => t.VehicleId, cascadeDelete: true)
                .Index(t => t.VehicleId);
            
            CreateTable(
                "dbo.VehicleExtras",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Index = c.Int(nullable: false),
                        IsOn = c.Boolean(nullable: false, storeType: "bit"),
                        VehicleId = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Vehicles", t => t.VehicleId, cascadeDelete: true)
                .Index(t => t.VehicleId);
            
            CreateTable(
                "dbo.VehicleMods",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Index = c.Int(nullable: false),
                        Name = c.String(maxLength: 1000, unicode: false),
                        TypeName = c.String(maxLength: 1000, unicode: false),
                        Count = c.Int(nullable: false),
                        Type = c.Int(nullable: false),
                        VehicleId = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Vehicles", t => t.VehicleId, cascadeDelete: true)
                .Index(t => t.VehicleId);
            
            CreateTable(
                "dbo.VehicleSeats",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Index = c.Int(nullable: false),
                        VehicleId = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Vehicles", t => t.VehicleId, cascadeDelete: true)
                .Index(t => t.VehicleId);
            
            CreateTable(
                "dbo.VehicleWheels",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Type = c.Int(nullable: false),
                        Position = c.Int(nullable: false),
                        Index = c.Int(nullable: false),
                        IsBurst = c.Boolean(nullable: false, storeType: "bit"),
                        VehicleId = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Vehicles", t => t.VehicleId, cascadeDelete: true)
                .Index(t => t.VehicleId);
            
            CreateTable(
                "dbo.VehicleWindows",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Index = c.Int(nullable: false),
                        IsIntact = c.Boolean(nullable: false, storeType: "bit"),
                        IsRolledDown = c.Boolean(nullable: false, storeType: "bit"),
                        VehicleId = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Vehicles", t => t.VehicleId, cascadeDelete: true)
                .Index(t => t.VehicleId);
        }
        
        public override void Down()
        {
            DropForeignKey("dbo.VehicleWindows", "VehicleId", "dbo.Vehicles");
            DropForeignKey("dbo.VehicleWheels", "VehicleId", "dbo.Vehicles");
            DropForeignKey("dbo.VehicleSeats", "VehicleId", "dbo.Vehicles");
            DropForeignKey("dbo.VehicleMods", "VehicleId", "dbo.Vehicles");
            DropForeignKey("dbo.VehicleExtras", "VehicleId", "dbo.Vehicles");
            DropForeignKey("dbo.VehicleDoors", "VehicleId", "dbo.Vehicles");
            DropIndex("dbo.VehicleWindows", new[] { "VehicleId" });
            DropIndex("dbo.VehicleWheels", new[] { "VehicleId" });
            DropIndex("dbo.VehicleSeats", new[] { "VehicleId" });
            DropIndex("dbo.VehicleMods", new[] { "VehicleId" });
            DropIndex("dbo.VehicleExtras", new[] { "VehicleId" });
            DropIndex("dbo.VehicleDoors", new[] { "VehicleId" });
            DropTable("dbo.VehicleWindows");
            DropTable("dbo.VehicleWheels");
            DropTable("dbo.VehicleSeats");
            DropTable("dbo.VehicleMods");
            DropTable("dbo.VehicleExtras");
            DropTable("dbo.VehicleDoors");
            DropTable("dbo.Vehicles");
        }
    }
}
