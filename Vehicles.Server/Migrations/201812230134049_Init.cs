// <auto-generated />
// ReSharper disable all

using System;
using System.Data.Entity.Migrations;
using System.CodeDom.Compiler;
using System.Data.Entity.Migrations.Infrastructure;

namespace IgiCore.Vehicles.Server.Migrations
{
    [GeneratedCode("NFive.Migration", "0.1 Alpha Build 87")]
    public class Init : DbMigration, IMigrationMetadata
    {
        string IMigrationMetadata.Id => "201812230134049_Init";
        
        string IMigrationMetadata.Source => null;
        
        string IMigrationMetadata.Target => "";
        
        public override void Up()
        {
            CreateTable(
                "dbo.Vehicles",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                        Hash = c.Long(nullable: false),
                        Handle = c.Int(),
                        NetId = c.Int(),
                        VIN = c.String(maxLength: 1000, unicode: false),
                        LicensePlate = c.String(maxLength: 1000, unicode: false),
                        TrackingUserId = c.Guid(nullable: false),
                        Position_X = c.Single(nullable: false),
                        Position_Y = c.Single(nullable: false),
                        Position_Z = c.Single(nullable: false),
                        Heading = c.Single(nullable: false),
                        BodyHealth = c.Single(nullable: false),
                        EngineHealth = c.Single(nullable: false),
                        DirtLevel = c.Single(nullable: false),
                        FuelLevel = c.Single(nullable: false),
                        OilLevel = c.Single(nullable: false),
                        PetrolTankHealth = c.Single(nullable: false),
                        TowingCraneRaisedAmount = c.Single(nullable: false),
                        HasAlarm = c.Boolean(nullable: false, storeType: "bit"),
                        IsAlarmed = c.Boolean(nullable: false, storeType: "bit"),
                        IsAlarmSounding = c.Boolean(nullable: false, storeType: "bit"),
                        HasLock = c.Boolean(nullable: false, storeType: "bit"),
                        IsDrivable = c.Boolean(nullable: false, storeType: "bit"),
                        IsEngineRunning = c.Boolean(nullable: false, storeType: "bit"),
                        HasSeatBelts = c.Boolean(nullable: false, storeType: "bit"),
                        IsHighBeamsOn = c.Boolean(nullable: false, storeType: "bit"),
                        IsLightsOn = c.Boolean(nullable: false, storeType: "bit"),
                        IsInteriorLightOn = c.Boolean(nullable: false, storeType: "bit"),
                        IsSearchLightOn = c.Boolean(nullable: false, storeType: "bit"),
                        IsTaxiLightOn = c.Boolean(nullable: false, storeType: "bit"),
                        IsLeftIndicatorLightOn = c.Boolean(nullable: false, storeType: "bit"),
                        IsRightIndicatorLightOn = c.Boolean(nullable: false, storeType: "bit"),
                        IsFrontBumperBrokenOff = c.Boolean(nullable: false, storeType: "bit"),
                        IsRearBumperBrokenOff = c.Boolean(nullable: false, storeType: "bit"),
                        IsLeftHeadLightBroken = c.Boolean(nullable: false, storeType: "bit"),
                        IsRightHeadLightBroken = c.Boolean(nullable: false, storeType: "bit"),
                        IsRadioEnabled = c.Boolean(nullable: false, storeType: "bit"),
                        IsRoofOpen = c.Boolean(nullable: false, storeType: "bit"),
                        NeedsToBeHotWired = c.Boolean(nullable: false, storeType: "bit"),
                        HasRoof = c.Boolean(nullable: false, storeType: "bit"),
                        IsVehicleConvertible = c.Boolean(nullable: false, storeType: "bit"),
                        CanTiresBurst = c.Boolean(nullable: false, storeType: "bit"),
                        PrimaryColor_StockColor = c.Int(nullable: false),
                        PrimaryColor_CustomColor_A = c.Byte(),
                        PrimaryColor_CustomColor_R = c.Byte(),
                        PrimaryColor_CustomColor_G = c.Byte(),
                        PrimaryColor_CustomColor_B = c.Byte(),
                        PrimaryColor_IsCustom = c.Boolean(nullable: false, storeType: "bit"),
                        SecondaryColor_StockColor = c.Int(nullable: false),
                        SecondaryColor_CustomColor_A = c.Byte(),
                        SecondaryColor_CustomColor_R = c.Byte(),
                        SecondaryColor_CustomColor_G = c.Byte(),
                        SecondaryColor_CustomColor_B = c.Byte(),
                        SecondaryColor_IsCustom = c.Boolean(nullable: false, storeType: "bit"),
                        PearlescentColor = c.Int(nullable: false),
                        DashboardColor = c.Int(nullable: false),
                        RimColor = c.Int(nullable: false),
                        NeonColor_A = c.Byte(),
                        NeonColor_R = c.Byte(),
                        NeonColor_G = c.Byte(),
                        NeonColor_B = c.Byte(),
                        NeonPositions = c.Int(nullable: false),
                        TireSmokeColor_A = c.Byte(),
                        TireSmokeColor_R = c.Byte(),
                        TireSmokeColor_G = c.Byte(),
                        TireSmokeColor_B = c.Byte(),
                        TrimColor = c.Int(nullable: false),
                        WindowTint = c.Int(nullable: false),
                        LockStatus = c.Int(nullable: false),
                        RadioStation = c.Int(nullable: false),
                        Class = c.Int(nullable: false),
                        Discriminator = c.String(nullable: false, maxLength: 128, storeType: "nvarchar"),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.VehicleDoors",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                        Index = c.Int(nullable: false),
                        IsOpen = c.Boolean(nullable: false, storeType: "bit"),
                        IsBroken = c.Boolean(nullable: false, storeType: "bit"),
                        Angle = c.Single(nullable: false),
                        Vehicle_Id = c.Guid(),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Vehicles", t => t.Vehicle_Id)
                .Index(t => t.Vehicle_Id);
            
            CreateTable(
                "dbo.VehicleExtras",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                        Index = c.Int(nullable: false),
                        IsOn = c.Boolean(nullable: false, storeType: "bit"),
                        VehicleId = c.Guid(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Vehicles", t => t.VehicleId, cascadeDelete: true)
                .Index(t => t.VehicleId);
            
            CreateTable(
                "dbo.VehicleMods",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                        Index = c.Int(nullable: false),
                        Name = c.String(maxLength: 1000, unicode: false),
                        TypeName = c.String(maxLength: 1000, unicode: false),
                        Count = c.Int(nullable: false),
                        Type = c.Int(nullable: false),
                        Vehicle_Id = c.Guid(),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Vehicles", t => t.Vehicle_Id)
                .Index(t => t.Vehicle_Id);
            
            CreateTable(
                "dbo.VehicleSeats",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                        Index = c.Int(nullable: false),
                        Vehicle_Id = c.Guid(),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Vehicles", t => t.Vehicle_Id)
                .Index(t => t.Vehicle_Id);
            
            CreateTable(
                "dbo.VehicleWheels",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                        Type = c.Int(nullable: false),
                        Position = c.Int(nullable: false),
                        Index = c.Int(nullable: false),
                        IsBurst = c.Boolean(nullable: false, storeType: "bit"),
                        Vehicle_Id = c.Guid(),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Vehicles", t => t.Vehicle_Id)
                .Index(t => t.Vehicle_Id);
            
            CreateTable(
                "dbo.VehicleWindows",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                        Index = c.Int(nullable: false),
                        IsIntact = c.Boolean(nullable: false, storeType: "bit"),
                        IsRolledDown = c.Boolean(nullable: false, storeType: "bit"),
                        Vehicle_Id = c.Guid(),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Vehicles", t => t.Vehicle_Id)
                .Index(t => t.Vehicle_Id);
            
        }
        
        public override void Down()
        {
            DropForeignKey("dbo.VehicleWindows", "Vehicle_Id", "dbo.Vehicles");
            DropForeignKey("dbo.VehicleWheels", "Vehicle_Id", "dbo.Vehicles");
            DropForeignKey("dbo.VehicleSeats", "Vehicle_Id", "dbo.Vehicles");
            DropForeignKey("dbo.VehicleMods", "Vehicle_Id", "dbo.Vehicles");
            DropForeignKey("dbo.VehicleExtras", "VehicleId", "dbo.Vehicles");
            DropForeignKey("dbo.VehicleDoors", "Vehicle_Id", "dbo.Vehicles");
            DropIndex("dbo.VehicleWindows", new[] { "Vehicle_Id" });
            DropIndex("dbo.VehicleWheels", new[] { "Vehicle_Id" });
            DropIndex("dbo.VehicleSeats", new[] { "Vehicle_Id" });
            DropIndex("dbo.VehicleMods", new[] { "Vehicle_Id" });
            DropIndex("dbo.VehicleExtras", new[] { "VehicleId" });
            DropIndex("dbo.VehicleDoors", new[] { "Vehicle_Id" });
            DropTable("dbo.VehicleWindows");
            DropTable("dbo.VehicleWheels");
            DropTable("dbo.VehicleSeats");
            DropTable("dbo.VehicleMods");
            DropTable("dbo.VehicleExtras");
            DropTable("dbo.VehicleDoors");
            DropTable("dbo.Vehicles");
        }
    }
}
